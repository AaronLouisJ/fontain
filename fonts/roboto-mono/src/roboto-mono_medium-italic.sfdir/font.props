SplineFontDB: 3.0
FontName: RobotoMono-MediumItalic
FullName: Roboto Mono Medium Italic
FamilyName: Roboto Mono Medium
Weight: Medium
Copyright: Copyright 2015 Google Inc. All Rights Reserved.
FontLog: "This file provides detailed information on the Roboto Mono font Software.+AAoA-This information should be distributed along with the Inconsolata fonts and any derivative works.+AAoACgAA-Roboto Mono Font Information+AAoACgAA-Roboto Mono is a monospaced addition to the Roboto type family. Like the other members of the Roboto family, the fonts are optimized for readability on screens across a wide variety of devices and reading environments. While the monospaced version is related to its variable width cousin, it doesn+IBkA-t hesitate to change forms to better fit the constraints of a monospaced environment. For example, narrow glyphs like +IBgA-I+IBkA, +IBgA-l+IBkA and +IBgA-i+IBkA have added serifs for more even texture while wider glyphs are adjusted for weight. Curved caps like +IBgA-C+IBkA and +IBgA-O+IBkA take on the straighter sides from Roboto Condensed.+AAoACgAA-Special consideration is given to glyphs important for reading and writing software source code. Letters with similar shapes are easy to tell apart. Digit +IBgA-1+IBkA, lowercase +IBgA-l+IBkA and capital +IBgA-I+IBkA are easily differentiated as are zero and the letter +IBgA-O+IBkA. Punctuation important for code has also been considered. For example, the curly braces +IBgA{ }+IBkA have exaggerated points to clearly differentiate them from parenthesis +IBgA( )+IBkA and braces +IBgA[ ]+IBkA. Periods and commas are also exaggerated to identify them more quickly. The scale and weight of symbols commonly used as operators have also been optimized.+AAoACgAK-ChangeLog+AAoACgAA-12 Jun 2015 (Christoph Haag)+AAoA-- created fontforge sources as base to work on GNU/Linux+AAoA-- added FONTLOG to .sfdir+AAoA-- Mastered Font from Fontforge SFDIR to UFO,OTF,TTF,EOT,WOFF,SVG+AAoACgAA??? (Christian Robertson)+AAoA-- Initial Release.+AAoACgAA-Acknowledgements+AAoACgAA-If you make modifications be sure to add your name (N), email (E), web-address (if you have one) (W) and description (D). This list is in alphabetical order.+AAoACgAA-N: Christoph Haag+AAoA-E: christoph@lafkon.net+AAoA-W: www.lafkon.net+AAoA-D: Transformer+AAoACgAA-N: Christian Robertson+AAoA-W: www.betatype.com+AAoA-D: Designer"
Version: 2.000986; 2015; ttfautohint (v1.3)
ItalicAngle: 0
UnderlinePosition: -200
UnderlineWidth: 100
Ascent: 1536
Descent: 512
InvalidEm: 0
sfntRevision: 0x00020041
LayerCount: 2
Layer: 0 1 "Back" 1
Layer: 1 1 "Fore" 0
XUID: [1021 159 138986633 89173]
StyleMap: 0x0001
FSType: 0
OS2Version: 3
OS2_WeightWidthSlopeOnly: 0
OS2_UseTypoMetrics: 0
CreationTime: 1221222574
ModificationTime: 1432229893
PfmFamily: 81
TTFWeight: 500
TTFWidth: 5
LineGap: 0
VLineGap: 0
Panose: 0 0 0 0 0 0 0 0 0 0
OS2TypoAscent: 1536
OS2TypoAOffset: 0
OS2TypoDescent: -512
OS2TypoDOffset: 0
OS2TypoLinegap: 102
OS2WinAscent: 1946
OS2WinAOffset: 0
OS2WinDescent: 512
OS2WinDOffset: 0
HheadAscent: 1900
HheadAOffset: 0
HheadDescent: -500
HheadDOffset: 0
OS2SubXSize: 1434
OS2SubYSize: 1331
OS2SubXOff: 0
OS2SubYOff: 287
OS2SupXSize: 1434
OS2SupYSize: 1331
OS2SupXOff: 0
OS2SupYOff: 977
OS2StrikeYSize: 102
OS2StrikeYPos: 512
OS2CapHeight: 1456
OS2XHeight: 1082
OS2Vendor: 'pyrs'
OS2CodePages: 2000019f.4f010000
OS2UnicodeRanges: e00002ff.1000205b.00000020.00000000
Lookup: 1 0 0 "'smcp' Lowercase to Small Capitals lookup 0" { "'smcp' Lowercase to Small Capitals lookup 0 subtable"  } ['smcp' ('DFLT' <'dflt' > ) ]
DEI: 91125
TtTable: prep
SVTCA[y-axis]
MPPEM
PUSHB_1
 200
GT
IF
PUSHB_2
 1
 1
INSTCTRL
EIF
PUSHW_3
 1
 2048
 2048
MUL
WCVTF
PUSHB_2
 0
 6
WS
PUSHB_6
 0
 71
 51
 31
 4
 0
LOOPCALL
PUSHB_2
 0
 6
WS
NPUSHB
 10
 77
 1
 58
 8
 38
 8
 20
 7
 4
 8
LOOPCALL
PUSHB_2
 0
 6
WS
NPUSHB
 10
 78
 0
 68
 6
 48
 6
 29
 5
 4
 8
LOOPCALL
PUSHB_2
 0
 10
WS
PUSHW_4
 4992
 3776
 2496
 1344
PUSHB_2
 4
 9
LOOPCALL
PUSHB_2
 0
 14
WS
PUSHB_6
 0
 64
 64
 64
 4
 9
LOOPCALL
PUSHB_2
 3
 0
WCVTP
PUSHB_2
 36
 1
GETINFO
LTEQ
IF
PUSHB_1
 64
GETINFO
IF
PUSHB_2
 3
 100
WCVTP
PUSHB_2
 38
 1
GETINFO
LTEQ
IF
PUSHW_3
 2176
 1
 1088
GETINFO
MUL
EQ
IF
PUSHB_2
 3
 0
WCVTP
EIF
EIF
EIF
EIF
NPUSHB
 10
 78
 0
 60
 8
 40
 8
 22
 7
 4
 12
LOOPCALL
PUSHW_1
 511
SCANCTRL
PUSHB_1
 4
SCANTYPE
PUSHB_2
 2
 0
WCVTP
PUSHB_2
 5
 100
WCVTP
EndTTInstrs
TtTable: fpgm
PUSHB_1
 0
FDEF
DUP
PUSHB_1
 0
NEQ
IF
RCVT
EIF
DUP
DUP
MPPEM
PUSHB_1
 14
LTEQ
MPPEM
PUSHB_1
 6
GTEQ
AND
IF
PUSHB_1
 52
ELSE
PUSHB_1
 40
EIF
ADD
FLOOR
DUP
ROLL
NEQ
IF
PUSHB_1
 2
CINDEX
SUB
PUSHW_2
 2048
 2048
MUL
MUL
SWAP
DIV
ELSE
POP
POP
PUSHB_1
 0
EIF
PUSHB_1
 0
RS
SWAP
WCVTP
PUSHB_3
 0
 1
 0
RS
ADD
WS
ENDF
PUSHB_1
 1
FDEF
PUSHB_1
 32
ADD
FLOOR
ENDF
PUSHB_1
 2
FDEF
DUP
ABS
DUP
PUSHB_1
 192
LT
PUSHB_1
 4
MINDEX
AND
PUSHB_3
 40
 1
 10
RS
RCVT
MUL
RCVT
GT
OR
IF
POP
SWAP
POP
ELSE
ROLL
IF
DUP
PUSHB_1
 80
LT
IF
POP
PUSHB_1
 64
EIF
ELSE
DUP
PUSHB_1
 56
LT
IF
POP
PUSHB_1
 56
EIF
EIF
DUP
PUSHB_2
 1
 10
RS
RCVT
MUL
RCVT
SUB
ABS
PUSHB_1
 40
LT
IF
POP
PUSHB_2
 1
 10
RS
RCVT
MUL
RCVT
DUP
PUSHB_1
 48
LT
IF
POP
PUSHB_1
 48
EIF
ELSE
DUP
PUSHB_1
 192
LT
IF
DUP
FLOOR
DUP
ROLL
ROLL
SUB
DUP
PUSHB_1
 10
LT
IF
ADD
ELSE
DUP
PUSHB_1
 32
LT
IF
POP
PUSHB_1
 10
ADD
ELSE
DUP
PUSHB_1
 54
LT
IF
POP
PUSHB_1
 54
ADD
ELSE
ADD
EIF
EIF
EIF
ELSE
PUSHB_1
 1
CALL
EIF
EIF
SWAP
PUSHB_1
 0
LT
IF
NEG
EIF
EIF
ENDF
PUSHB_1
 3
FDEF
DUP
RCVT
DUP
PUSHB_1
 4
CINDEX
SUB
ABS
DUP
PUSHB_1
 5
RS
LT
IF
PUSHB_1
 5
SWAP
WS
PUSHB_1
 6
SWAP
WS
ELSE
POP
POP
EIF
PUSHB_1
 1
ADD
ENDF
PUSHB_1
 4
FDEF
SWAP
POP
SWAP
POP
DUP
ABS
PUSHB_2
 5
 98
WS
DUP
PUSHB_1
 6
SWAP
WS
PUSHB_2
 1
 10
RS
RCVT
MUL
PUSHB_2
 1
 10
RS
PUSHB_1
 4
ADD
RCVT
MUL
PUSHB_1
 3
LOOPCALL
POP
DUP
PUSHB_1
 6
RS
DUP
ROLL
DUP
ROLL
PUSHB_1
 1
CALL
PUSHB_2
 48
 5
CINDEX
PUSHB_1
 4
MINDEX
LTEQ
IF
ADD
LT
ELSE
SUB
GT
EIF
IF
SWAP
EIF
POP
DUP
PUSHB_1
 64
GTEQ
IF
PUSHB_1
 1
CALL
ELSE
POP
PUSHB_1
 64
EIF
SWAP
PUSHB_1
 0
LT
IF
NEG
EIF
ENDF
PUSHB_1
 5
FDEF
PUSHB_1
 7
RS
CALL
PUSHB_3
 0
 2
 0
RS
ADD
WS
ENDF
PUSHB_1
 6
FDEF
PUSHB_1
 7
SWAP
WS
SWAP
DUP
PUSHB_1
 0
SWAP
WS
SUB
PUSHB_1
 2
DIV
FLOOR
PUSHB_1
 1
MUL
PUSHB_1
 1
ADD
PUSHB_1
 5
LOOPCALL
ENDF
PUSHB_1
 7
FDEF
DUP
DUP
RCVT
DUP
PUSHB_1
 11
RS
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
WCVTP
PUSHB_1
 1
ADD
ENDF
PUSHB_1
 8
FDEF
PUSHB_3
 7
 11
 0
RS
RCVT
WS
LOOPCALL
POP
PUSHB_3
 0
 1
 0
RS
ADD
WS
ENDF
PUSHB_1
 9
FDEF
PUSHB_1
 0
RS
SWAP
WCVTP
PUSHB_3
 0
 1
 0
RS
ADD
WS
ENDF
PUSHB_1
 10
FDEF
DUP
DUP
RCVT
DUP
PUSHB_1
 1
CALL
SWAP
PUSHB_1
 0
RS
PUSHB_1
 4
CINDEX
ADD
DUP
RCVT
ROLL
SWAP
SUB
DUP
ABS
DUP
PUSHB_1
 32
LT
IF
POP
PUSHB_1
 0
ELSE
PUSHB_1
 48
LT
IF
PUSHB_1
 32
ELSE
PUSHB_1
 64
EIF
EIF
SWAP
PUSHB_1
 0
LT
IF
NEG
EIF
PUSHB_1
 3
CINDEX
SWAP
SUB
WCVTP
WCVTP
PUSHB_1
 1
ADD
ENDF
PUSHB_1
 11
FDEF
DUP
DUP
RCVT
DUP
PUSHB_1
 1
CALL
SWAP
PUSHB_1
 0
RS
PUSHB_1
 4
CINDEX
ADD
DUP
RCVT
ROLL
SWAP
SUB
DUP
ABS
PUSHB_1
 36
LT
IF
PUSHB_1
 0
ELSE
PUSHB_1
 64
EIF
SWAP
PUSHB_1
 0
LT
IF
NEG
EIF
PUSHB_1
 3
CINDEX
SWAP
SUB
WCVTP
WCVTP
PUSHB_1
 1
ADD
ENDF
PUSHB_1
 12
FDEF
DUP
PUSHB_1
 0
SWAP
WS
PUSHB_3
 11
 10
 3
RCVT
IF
POP
ELSE
SWAP
POP
EIF
LOOPCALL
POP
ENDF
PUSHB_1
 13
FDEF
PUSHB_2
 2
 2
RCVT
PUSHB_1
 100
SUB
WCVTP
ENDF
PUSHB_1
 14
FDEF
PUSHB_1
 1
ADD
DUP
DUP
PUSHB_1
 12
RS
MD[orig]
PUSHB_1
 0
LT
IF
DUP
PUSHB_1
 12
SWAP
WS
EIF
PUSHB_1
 13
RS
MD[orig]
PUSHB_1
 0
GT
IF
DUP
PUSHB_1
 13
SWAP
WS
EIF
ENDF
PUSHB_1
 15
FDEF
DUP
PUSHB_1
 16
DIV
FLOOR
PUSHB_1
 1
MUL
DUP
PUSHW_1
 1024
MUL
ROLL
SWAP
SUB
PUSHB_1
 14
RS
ADD
DUP
ROLL
ADD
DUP
PUSHB_1
 14
SWAP
WS
SWAP
ENDF
PUSHB_1
 16
FDEF
MPPEM
EQ
IF
PUSHB_2
 4
 100
WCVTP
EIF
DEPTH
PUSHB_1
 13
NEG
SWAP
JROT
ENDF
PUSHB_1
 17
FDEF
MPPEM
LTEQ
IF
MPPEM
GTEQ
IF
PUSHB_2
 4
 100
WCVTP
EIF
ELSE
POP
EIF
DEPTH
PUSHB_1
 19
NEG
SWAP
JROT
ENDF
PUSHB_1
 18
FDEF
PUSHB_2
 0
 15
RS
NEQ
IF
PUSHB_2
 15
 15
RS
PUSHB_1
 1
SUB
WS
PUSHB_1
 15
CALL
EIF
PUSHB_1
 0
RS
PUSHB_1
 2
CINDEX
WS
PUSHB_2
 12
 2
CINDEX
WS
PUSHB_2
 13
 2
CINDEX
WS
PUSHB_1
 1
SZPS
SWAP
DUP
PUSHB_1
 3
CINDEX
LT
IF
PUSHB_2
 1
 0
RS
ADD
PUSHB_1
 4
CINDEX
WS
ROLL
ROLL
DUP
ROLL
SWAP
SUB
PUSHB_1
 14
LOOPCALL
POP
SWAP
PUSHB_1
 1
SUB
DUP
ROLL
SWAP
SUB
PUSHB_1
 14
LOOPCALL
POP
ELSE
PUSHB_2
 1
 0
RS
ADD
PUSHB_1
 2
CINDEX
WS
PUSHB_1
 2
CINDEX
SUB
PUSHB_1
 14
LOOPCALL
POP
EIF
PUSHB_1
 12
RS
GC[orig]
PUSHB_1
 13
RS
GC[orig]
ADD
PUSHB_1
 2
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
DUP
PUSHB_1
 11
RS
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
PUSHB_2
 0
 0
SZP0
SWAP
WCVTP
PUSHB_1
 1
RS
PUSHB_1
 0
MIAP[no-rnd]
PUSHB_3
 1
 1
 1
RS
ADD
WS
ENDF
PUSHB_1
 19
FDEF
SVTCA[y-axis]
PUSHB_2
 0
 2
RCVT
EQ
IF
PUSHB_1
 15
SWAP
WS
DUP
RCVT
PUSHB_1
 11
SWAP
WS
PUSHB_1
 10
SWAP
PUSHB_1
 4
ADD
WS
DUP
ADD
PUSHB_1
 1
SUB
PUSHB_6
 16
 16
 1
 0
 14
 0
WS
WS
ROLL
ADD
PUSHB_2
 18
 6
CALL
PUSHB_1
 117
CALL
ELSE
CLEAR
EIF
ENDF
PUSHB_1
 20
FDEF
PUSHB_2
 0
 19
CALL
ENDF
PUSHB_1
 21
FDEF
PUSHB_2
 1
 19
CALL
ENDF
PUSHB_1
 22
FDEF
PUSHB_2
 2
 19
CALL
ENDF
PUSHB_1
 23
FDEF
PUSHB_2
 3
 19
CALL
ENDF
PUSHB_1
 24
FDEF
PUSHB_2
 4
 19
CALL
ENDF
PUSHB_1
 25
FDEF
PUSHB_2
 5
 19
CALL
ENDF
PUSHB_1
 26
FDEF
PUSHB_2
 6
 19
CALL
ENDF
PUSHB_1
 27
FDEF
PUSHB_2
 7
 19
CALL
ENDF
PUSHB_1
 28
FDEF
PUSHB_2
 8
 19
CALL
ENDF
PUSHB_1
 29
FDEF
PUSHB_2
 9
 19
CALL
ENDF
PUSHB_1
 41
FDEF
DUP
MDAP[no-rnd]
PUSHB_1
 1
DELTAP1
ENDF
PUSHB_1
 42
FDEF
DUP
MDAP[no-rnd]
PUSHB_1
 1
DELTAP2
ENDF
PUSHB_1
 43
FDEF
DUP
MDAP[no-rnd]
PUSHB_1
 1
DELTAP3
ENDF
PUSHB_1
 30
FDEF
SVTCA[y-axis]
PUSHB_1
 13
CALL
PUSHB_2
 0
 2
RCVT
EQ
IF
PUSHB_1
 15
SWAP
WS
DUP
RCVT
PUSHB_1
 11
SWAP
WS
PUSHB_1
 10
SWAP
PUSHB_1
 4
ADD
WS
DUP
ADD
PUSHB_1
 1
SUB
PUSHB_6
 16
 16
 1
 0
 14
 0
WS
WS
ROLL
ADD
PUSHB_2
 18
 6
CALL
PUSHB_1
 117
CALL
ELSE
CLEAR
EIF
ENDF
PUSHB_1
 31
FDEF
PUSHB_2
 0
 30
CALL
ENDF
PUSHB_1
 32
FDEF
PUSHB_2
 1
 30
CALL
ENDF
PUSHB_1
 33
FDEF
PUSHB_2
 2
 30
CALL
ENDF
PUSHB_1
 34
FDEF
PUSHB_2
 3
 30
CALL
ENDF
PUSHB_1
 35
FDEF
PUSHB_2
 4
 30
CALL
ENDF
PUSHB_1
 36
FDEF
PUSHB_2
 5
 30
CALL
ENDF
PUSHB_1
 37
FDEF
PUSHB_2
 6
 30
CALL
ENDF
PUSHB_1
 38
FDEF
PUSHB_2
 7
 30
CALL
ENDF
PUSHB_1
 39
FDEF
PUSHB_2
 8
 30
CALL
ENDF
PUSHB_1
 40
FDEF
PUSHB_2
 9
 30
CALL
ENDF
PUSHB_1
 44
FDEF
DUP
ALIGNRP
PUSHB_1
 1
ADD
ENDF
PUSHB_1
 45
FDEF
DUP
ADD
PUSHB_1
 16
ADD
DUP
RS
SWAP
PUSHB_1
 1
ADD
RS
PUSHB_1
 2
CINDEX
SUB
PUSHB_1
 1
ADD
PUSHB_1
 44
LOOPCALL
POP
ENDF
PUSHB_1
 46
FDEF
PUSHB_1
 45
CALL
PUSHB_1
 45
LOOPCALL
ENDF
PUSHB_1
 47
FDEF
DUP
DUP
GC[orig]
DUP
DUP
PUSHB_1
 11
RS
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
SWAP
SUB
SHPIX
SWAP
DUP
ROLL
NEQ
IF
DUP
GC[orig]
DUP
DUP
PUSHB_1
 11
RS
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
SWAP
SUB
SHPIX
ELSE
POP
EIF
ENDF
PUSHB_1
 48
FDEF
SVTCA[y-axis]
PUSHB_2
 0
 2
RCVT
EQ
IF
PUSHB_1
 1
SZPS
PUSHB_1
 47
LOOPCALL
PUSHB_2
 5
 1
SZP2
RCVT
IF
IUP[y]
EIF
ELSE
CLEAR
EIF
ENDF
PUSHB_1
 49
FDEF
SVTCA[y-axis]
PUSHB_1
 13
CALL
PUSHB_2
 0
 2
RCVT
EQ
IF
PUSHB_1
 1
SZPS
PUSHB_1
 47
LOOPCALL
PUSHB_2
 5
 1
SZP2
RCVT
IF
IUP[y]
EIF
ELSE
CLEAR
EIF
ENDF
PUSHB_1
 50
FDEF
DUP
SHC[rp1]
PUSHB_1
 1
ADD
ENDF
PUSHB_1
 51
FDEF
SVTCA[y-axis]
PUSHB_1
 1
RCVT
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
PUSHB_1
 1
CALL
PUSHB_1
 11
RS
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
PUSHB_1
 1
CALL
PUSHB_1
 0
SZPS
PUSHB_5
 0
 0
 0
 0
 0
WCVTP
MIAP[no-rnd]
SWAP
SHPIX
PUSHB_2
 50
 1
SZP2
LOOPCALL
ENDF
PUSHB_1
 52
FDEF
DUP
ALIGNRP
DUP
GC[orig]
DUP
PUSHB_1
 11
RS
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
PUSHB_1
 0
RS
SUB
SHPIX
ENDF
PUSHB_1
 53
FDEF
MDAP[no-rnd]
SLOOP
ALIGNRP
ENDF
PUSHB_1
 54
FDEF
DUP
ALIGNRP
DUP
GC[orig]
DUP
PUSHB_1
 11
RS
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
PUSHB_1
 0
RS
SUB
PUSHB_1
 1
RS
MUL
SHPIX
ENDF
PUSHB_1
 55
FDEF
PUSHB_2
 2
 0
SZPS
CINDEX
DUP
MDAP[no-rnd]
DUP
GC[orig]
PUSHB_1
 0
SWAP
WS
PUSHB_1
 2
CINDEX
MD[grid]
ROLL
ROLL
GC[orig]
SWAP
GC[orig]
SWAP
SUB
DUP
IF
DIV
ELSE
POP
EIF
PUSHB_1
 1
SWAP
WS
PUSHB_3
 54
 1
 1
SZP2
SZP1
LOOPCALL
ENDF
PUSHB_1
 56
FDEF
PUSHB_1
 0
SZPS
PUSHB_1
 4
CINDEX
PUSHB_1
 4
CINDEX
GC[orig]
SWAP
GC[orig]
SWAP
SUB
PUSHB_1
 9
RS
CALL
NEG
ROLL
MDAP[no-rnd]
SWAP
DUP
DUP
ALIGNRP
ROLL
SHPIX
ENDF
PUSHB_1
 57
FDEF
PUSHB_1
 0
SZPS
PUSHB_1
 4
CINDEX
PUSHB_1
 4
CINDEX
DUP
MDAP[no-rnd]
GC[orig]
SWAP
GC[orig]
SWAP
SUB
DUP
PUSHB_1
 4
SWAP
WS
PUSHB_1
 9
RS
CALL
DUP
PUSHB_1
 96
LT
IF
DUP
PUSHB_1
 64
LTEQ
IF
PUSHB_4
 2
 32
 3
 32
ELSE
PUSHB_4
 2
 38
 3
 26
EIF
WS
WS
SWAP
DUP
PUSHB_1
 8
RS
DUP
ROLL
SWAP
GC[orig]
SWAP
GC[orig]
SWAP
SUB
SWAP
GC[cur]
ADD
PUSHB_1
 4
RS
PUSHB_1
 2
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
DUP
PUSHB_1
 1
CALL
DUP
ROLL
ROLL
SUB
DUP
PUSHB_1
 2
RS
ADD
ABS
SWAP
PUSHB_1
 3
RS
SUB
ABS
LT
IF
PUSHB_1
 2
RS
SUB
ELSE
PUSHB_1
 3
RS
ADD
EIF
PUSHB_1
 3
CINDEX
PUSHB_1
 2
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
SUB
SWAP
DUP
DUP
PUSHB_1
 4
MINDEX
SWAP
GC[cur]
SUB
SHPIX
ELSE
SWAP
PUSHB_1
 8
RS
GC[cur]
PUSHB_1
 2
CINDEX
PUSHB_1
 8
RS
GC[orig]
SWAP
GC[orig]
SWAP
SUB
ADD
DUP
PUSHB_1
 4
RS
PUSHB_1
 2
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
SWAP
DUP
PUSHB_1
 1
CALL
SWAP
PUSHB_1
 4
RS
ADD
PUSHB_1
 1
CALL
PUSHB_1
 5
CINDEX
SUB
PUSHB_1
 5
CINDEX
PUSHB_1
 2
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
PUSHB_1
 4
MINDEX
SUB
DUP
PUSHB_1
 4
CINDEX
ADD
ABS
SWAP
PUSHB_1
 3
CINDEX
ADD
ABS
LT
IF
POP
ELSE
SWAP
POP
EIF
SWAP
DUP
DUP
PUSHB_1
 4
MINDEX
SWAP
GC[cur]
SUB
SHPIX
EIF
ENDF
PUSHB_1
 58
FDEF
PUSHB_1
 0
SZPS
DUP
DUP
DUP
PUSHB_1
 5
MINDEX
DUP
MDAP[no-rnd]
GC[orig]
SWAP
GC[orig]
SWAP
SUB
SWAP
ALIGNRP
SHPIX
ENDF
PUSHB_1
 59
FDEF
PUSHB_1
 0
SZPS
DUP
PUSHB_1
 8
SWAP
WS
DUP
DUP
DUP
GC[cur]
SWAP
GC[orig]
PUSHB_1
 1
CALL
SWAP
SUB
SHPIX
ENDF
PUSHB_1
 60
FDEF
PUSHB_1
 0
SZPS
PUSHB_1
 3
CINDEX
PUSHB_1
 2
CINDEX
GC[orig]
SWAP
GC[orig]
SWAP
SUB
PUSHB_1
 0
EQ
IF
MDAP[no-rnd]
DUP
ALIGNRP
SWAP
POP
ELSE
PUSHB_1
 2
CINDEX
PUSHB_1
 2
CINDEX
GC[orig]
SWAP
GC[orig]
SWAP
SUB
DUP
PUSHB_1
 5
CINDEX
PUSHB_1
 4
CINDEX
GC[orig]
SWAP
GC[orig]
SWAP
SUB
PUSHB_1
 6
CINDEX
PUSHB_1
 5
CINDEX
MD[grid]
PUSHB_1
 2
CINDEX
SUB
PUSHW_2
 2048
 2048
MUL
MUL
SWAP
DUP
IF
DIV
ELSE
POP
EIF
MUL
PUSHW_1
 1024
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
SWAP
MDAP[no-rnd]
SWAP
DUP
DUP
ALIGNRP
ROLL
SHPIX
SWAP
POP
EIF
ENDF
PUSHB_1
 61
FDEF
PUSHB_1
 0
SZPS
DUP
PUSHB_1
 8
RS
DUP
MDAP[no-rnd]
GC[orig]
SWAP
GC[orig]
SWAP
SUB
DUP
ADD
PUSHB_1
 32
ADD
FLOOR
PUSHB_1
 2
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
SWAP
DUP
DUP
ALIGNRP
ROLL
SHPIX
ENDF
PUSHB_1
 62
FDEF
SWAP
DUP
MDAP[no-rnd]
GC[cur]
PUSHB_1
 2
CINDEX
GC[cur]
GT
IF
DUP
ALIGNRP
EIF
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 63
FDEF
SWAP
DUP
MDAP[no-rnd]
GC[cur]
PUSHB_1
 2
CINDEX
GC[cur]
LT
IF
DUP
ALIGNRP
EIF
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 64
FDEF
SWAP
DUP
MDAP[no-rnd]
GC[cur]
PUSHB_1
 2
CINDEX
GC[cur]
GT
IF
DUP
ALIGNRP
EIF
SWAP
DUP
MDAP[no-rnd]
GC[cur]
PUSHB_1
 2
CINDEX
GC[cur]
LT
IF
DUP
ALIGNRP
EIF
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 65
FDEF
PUSHB_1
 56
CALL
SWAP
DUP
MDAP[no-rnd]
GC[cur]
PUSHB_1
 2
CINDEX
GC[cur]
GT
IF
DUP
ALIGNRP
EIF
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 66
FDEF
PUSHB_1
 57
CALL
ROLL
DUP
DUP
ALIGNRP
PUSHB_1
 4
SWAP
WS
ROLL
SHPIX
SWAP
DUP
MDAP[no-rnd]
GC[cur]
PUSHB_1
 2
CINDEX
GC[cur]
GT
IF
DUP
ALIGNRP
EIF
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
PUSHB_1
 4
RS
MDAP[no-rnd]
PUSHB_1
 46
CALL
ENDF
PUSHB_1
 67
FDEF
PUSHB_1
 0
SZPS
PUSHB_1
 4
CINDEX
PUSHB_1
 4
MINDEX
DUP
MDAP[no-rnd]
GC[orig]
SWAP
GC[orig]
SWAP
SUB
PUSHB_1
 9
RS
CALL
SWAP
DUP
ALIGNRP
DUP
MDAP[no-rnd]
SWAP
SHPIX
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 68
FDEF
PUSHB_2
 8
 4
CINDEX
WS
PUSHB_1
 0
SZPS
PUSHB_1
 4
CINDEX
PUSHB_1
 4
CINDEX
DUP
MDAP[no-rnd]
GC[orig]
SWAP
GC[orig]
SWAP
SUB
DUP
PUSHB_1
 4
SWAP
WS
PUSHB_1
 9
RS
CALL
DUP
PUSHB_1
 96
LT
IF
DUP
PUSHB_1
 64
LTEQ
IF
PUSHB_4
 2
 32
 3
 32
ELSE
PUSHB_4
 2
 38
 3
 26
EIF
WS
WS
SWAP
DUP
GC[orig]
PUSHB_1
 4
RS
PUSHB_1
 2
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
ADD
DUP
PUSHB_1
 1
CALL
DUP
ROLL
ROLL
SUB
DUP
PUSHB_1
 2
RS
ADD
ABS
SWAP
PUSHB_1
 3
RS
SUB
ABS
LT
IF
PUSHB_1
 2
RS
SUB
ELSE
PUSHB_1
 3
RS
ADD
EIF
PUSHB_1
 3
CINDEX
PUSHB_1
 2
DIV
DUP
PUSHB_1
 0
LT
IF
PUSHB_1
 64
ADD
EIF
FLOOR
PUSHB_1
 1
MUL
SUB
PUSHB_1
 2
CINDEX
GC[cur]
SUB
SHPIX
SWAP
DUP
ALIGNRP
SWAP
SHPIX
ELSE
POP
DUP
DUP
GC[cur]
SWAP
GC[orig]
PUSHB_1
 1
CALL
SWAP
SUB
SHPIX
POP
EIF
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 69
FDEF
PUSHB_1
 56
CALL
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 70
FDEF
PUSHB_1
 57
CALL
POP
SWAP
DUP
DUP
ALIGNRP
PUSHB_1
 4
SWAP
WS
SWAP
SHPIX
PUSHB_2
 46
 1
SZP1
CALL
PUSHB_1
 4
RS
MDAP[no-rnd]
PUSHB_1
 46
CALL
ENDF
PUSHB_1
 71
FDEF
PUSHB_1
 0
SZP2
DUP
GC[orig]
PUSHB_1
 0
SWAP
WS
PUSHB_3
 0
 1
 1
SZP2
SZP1
SZP0
MDAP[no-rnd]
PUSHB_1
 52
LOOPCALL
ENDF
PUSHB_1
 72
FDEF
PUSHB_1
 0
SZP2
DUP
GC[orig]
PUSHB_1
 0
SWAP
WS
PUSHB_3
 0
 1
 1
SZP2
SZP1
SZP0
MDAP[no-rnd]
PUSHB_1
 52
LOOPCALL
ENDF
PUSHB_1
 73
FDEF
PUSHB_2
 0
 1
SZP1
SZP0
PUSHB_1
 53
LOOPCALL
ENDF
PUSHB_1
 74
FDEF
PUSHB_1
 55
LOOPCALL
ENDF
PUSHB_1
 75
FDEF
PUSHB_1
 0
SZPS
RCVT
SWAP
DUP
MDAP[no-rnd]
DUP
GC[cur]
ROLL
SWAP
SUB
SHPIX
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 76
FDEF
PUSHB_1
 8
SWAP
WS
PUSHB_1
 75
CALL
ENDF
PUSHB_1
 77
FDEF
PUSHB_3
 0
 0
 68
CALL
ENDF
PUSHB_1
 78
FDEF
PUSHB_3
 0
 1
 68
CALL
ENDF
PUSHB_1
 79
FDEF
PUSHB_3
 1
 0
 68
CALL
ENDF
PUSHB_1
 80
FDEF
PUSHB_3
 1
 1
 68
CALL
ENDF
PUSHB_1
 81
FDEF
PUSHB_3
 0
 0
 69
CALL
ENDF
PUSHB_1
 82
FDEF
PUSHB_3
 0
 1
 69
CALL
ENDF
PUSHB_1
 83
FDEF
PUSHB_3
 1
 0
 69
CALL
ENDF
PUSHB_1
 84
FDEF
PUSHB_3
 1
 1
 69
CALL
ENDF
PUSHB_1
 85
FDEF
PUSHB_3
 0
 0
 65
CALL
ENDF
PUSHB_1
 86
FDEF
PUSHB_3
 0
 1
 65
CALL
ENDF
PUSHB_1
 87
FDEF
PUSHB_3
 1
 0
 65
CALL
ENDF
PUSHB_1
 88
FDEF
PUSHB_3
 1
 1
 65
CALL
ENDF
PUSHB_1
 89
FDEF
PUSHB_3
 0
 0
 67
CALL
ENDF
PUSHB_1
 90
FDEF
PUSHB_3
 0
 1
 67
CALL
ENDF
PUSHB_1
 91
FDEF
PUSHB_3
 1
 0
 67
CALL
ENDF
PUSHB_1
 92
FDEF
PUSHB_3
 1
 1
 67
CALL
ENDF
PUSHB_1
 93
FDEF
PUSHB_3
 0
 0
 70
CALL
ENDF
PUSHB_1
 94
FDEF
PUSHB_3
 0
 1
 70
CALL
ENDF
PUSHB_1
 95
FDEF
PUSHB_3
 1
 0
 70
CALL
ENDF
PUSHB_1
 96
FDEF
PUSHB_3
 1
 1
 70
CALL
ENDF
PUSHB_1
 97
FDEF
PUSHB_3
 0
 0
 66
CALL
ENDF
PUSHB_1
 98
FDEF
PUSHB_3
 0
 1
 66
CALL
ENDF
PUSHB_1
 99
FDEF
PUSHB_3
 1
 0
 66
CALL
ENDF
PUSHB_1
 100
FDEF
PUSHB_3
 1
 1
 66
CALL
ENDF
PUSHB_1
 101
FDEF
PUSHB_1
 58
CALL
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 102
FDEF
PUSHB_1
 58
CALL
PUSHB_1
 62
CALL
ENDF
PUSHB_1
 103
FDEF
PUSHB_1
 58
CALL
PUSHB_1
 63
CALL
ENDF
PUSHB_1
 104
FDEF
PUSHB_1
 0
SZPS
PUSHB_1
 58
CALL
PUSHB_1
 64
CALL
ENDF
PUSHB_1
 105
FDEF
PUSHB_1
 59
CALL
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 106
FDEF
PUSHB_1
 59
CALL
PUSHB_1
 62
CALL
ENDF
PUSHB_1
 107
FDEF
PUSHB_1
 59
CALL
PUSHB_1
 63
CALL
ENDF
PUSHB_1
 108
FDEF
PUSHB_1
 59
CALL
PUSHB_1
 64
CALL
ENDF
PUSHB_1
 109
FDEF
PUSHB_1
 60
CALL
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 110
FDEF
PUSHB_1
 60
CALL
PUSHB_1
 62
CALL
ENDF
PUSHB_1
 111
FDEF
PUSHB_1
 60
CALL
PUSHB_1
 63
CALL
ENDF
PUSHB_1
 112
FDEF
PUSHB_1
 60
CALL
PUSHB_1
 64
CALL
ENDF
PUSHB_1
 113
FDEF
PUSHB_1
 61
CALL
MDAP[no-rnd]
PUSHB_2
 46
 1
SZP1
CALL
ENDF
PUSHB_1
 114
FDEF
PUSHB_1
 61
CALL
PUSHB_1
 62
CALL
ENDF
PUSHB_1
 115
FDEF
PUSHB_1
 61
CALL
PUSHB_1
 63
CALL
ENDF
PUSHB_1
 116
FDEF
PUSHB_1
 61
CALL
PUSHB_1
 64
CALL
ENDF
PUSHB_1
 117
FDEF
PUSHB_4
 9
 4
 2
 3
RCVT
IF
POP
ELSE
SWAP
POP
EIF
WS
CALL
PUSHB_1
 8
NEG
PUSHB_1
 3
DEPTH
LT
JROT
PUSHB_2
 5
 1
SZP2
RCVT
IF
IUP[y]
EIF
ENDF
EndTTInstrs
ShortTable: cvt  78
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  0
  190
  190
  1456
  0
  1082
  0
  -416
  2146
  -555
  1479
  -22
  1105
  -21
  -439
  2146
  -555
  0
  0
  190
  190
  1456
  0
  1456
  1082
  -22
  -416
  2146
  -555
  1478
  -22
  1480
  1104
  -22
  -416
  2146
  -555
  0
  0
  190
  190
  1456
  0
  1514
  1082
  0
  -416
  2146
  -555
  1478
  -22
  1514
  1104
  -23
  -439
  2146
  -555
  50
  50
EndShort
ShortTable: maxp 16
  1
  0
  1041
  155
  22
  131
  5
  2
  80
  96
  119
  0
  221
  2967
  3
  1
EndShort
LangName: 1033 "" "" "Italic" "Google:Roboto Mono:2015" "" "Version 2.000986; 2015; ttfautohint (v1.3)" "" "Roboto Mono is a trademark of Google." "" "Google" "" "Google.com" "Christian Robertson" "Licensed under the Apache License, Version 2.0" "http://www.apache.org/licenses/LICENSE-2.0" "" "Roboto Mono" "Medium Italic"
GaspTable: 1 65535 15 1
Encoding: UnicodeBmp
UnicodeInterp: none
NameList: AGL For New Fonts
DisplaySize: -48
AntiAlias: 1
FitToEm: 0
WinInfo: 51 17 8
EndSplineFont
